grammar BCPL;

// Identifiers, Strings and Numbers

Letter                              : 'A'..'Z';

Digit                               : '0'..'9';

Space                               : ' ' | '\t' | '\r' | '\n';

number                              : (Digit)+;

identifier                          : Letter (Letter | Digit)*;

stringConstant                      :  '"' (Letter | Digit | Space)* '"';

// Operators

MultiplicationOperator              : '*' | '/';

AddOperator                         : '+' | '-';

ComparationOperator                 : '==' | '~=' | '<=' | '>=' | '<' | '>';

AndOperator                         : '&';

OrOperator                          : '|';

NotOperator                         : '~';

// Expressions

primaryExpression                   : stringConstant | number | identifier | 'TRUE' | 'FALSE';

multiplicationExpression            : primaryExpression MultiplicationOperator primaryExpression | primaryExpression;

addExpression                       : multiplicationExpression AddOperator multiplicationExpression | multiplicationExpression;

comparationExpression               : addExpression ComparationOperator addExpression | addExpression;

notExpression                       : NotOperator comparationExpression | comparationExpression;

andExpression                       : notExpression AndOperator notExpression | notExpression;

orExpression                        : andExpression OrOperator andExpression | andExpression;

expression                          : (orExpression)+ | 'VALOF' command;

expressionList                      : expression (',' expression)*;

// Declarations

identifierList                      : identifier (',' identifier)*;

functionDefinition                  : identifier '(' identifierList ')' '=' expression | identifier '(' ')' '=' expression;

routineDefinition                   : identifier '(' identifierList ')' 'BE' commandBlock | identifier '(' ')' 'BE' commandBlock;

variableDefinition                  : identifierList '=' expressionList;

definition                          : functionDefinition | routineDefinition | variableDefinition;

declaration                         : 'LET' definition ('AND' definition)*;

declarationList                     : declaration (';' declaration)*;

// Commands

assignmentCommand                   : identifierList ':=' expressionList;

simpleCommand                       : 'BREAK' | 'LOOP' | 'RETURN';

routineCommand                      : identifier '(' expressionList ')' | identifier '(' ')';

resultisCommand                     : 'RESULTIS' expression;

whileCommand                        : 'WHILE' expression 'DO' commandBlock;

ifCommand                           : 'IF' expression 'THEN' commandBlock;

unlessCommand                       : 'UNLESS' expression 'THEN' commandBlock;

conditionalCommand                  : ifCommand (unlessCommand)?;

command                             : assignmentCommand | resultisCommand | routineCommand | simpleCommand | whileCommand | conditionalCommand;

commandList                         : command (';' command)*;

commandBlock                        : '{' (declarationList ';')? commandList '}';

// Program

program                             : declarationList;