grammar BCPL;

// Gramática Léxica

Blank                    :     'Space' | 'Tab' | 'Eol';
Comment                  :     '//' (Graphic)* Eol;
Digit                    :     [0-9];
Eol                      :     '\n';
Graphic                  :     Letter | Digit | Op_aritimetic | Op_relation | Space | Tab | '.' | ':' | ';' | ',' | '"' | '\'' | '~' | '(' | ')' | '!' | '#' | '_' | '$';
Identifier               :     Letter (Letter | Number)*;
Keyword                  :     'INT' | 'BOOL' | 'LET' | 'AND' | 'WHILE' | 'RESULTIS' | 'IF' | 'DO' | 'ELSE' | 'TRUE' | 'FALSE' | 'BREAK' | 'CONTINUE' | 'WRITEF' | 'GLOBAL';
Letter                   :     [A-Z]| [a-z];
Number                   :     Digit (Digit)*;
Op_aritimetic            :     '+' | '-' | '*' | '/';
Op_attr                  :     ':=' | '=';
Op_relation              :     '<' | '<=' | '>' | '>=' | '==' | '!';
Space                    :     '/ $/';
StringConstant           :     '"' (Letter | Number | Tab | Space)* '"';
Tab                      :     '\t';
Token                    :     Identifier | Number | Op_relation | Op_aritimetic | Keyword | '(' | ')' | '{' | '}' | ',';

// Gramática Sintática;

program                  :     declarationList;

declarationList          :     'LET' definition ('AND' definition)*;

definition               :     functionDefinition
                         |     procedureDefinition
                         |     variableDefinition;

identifierList           :     Identifier (',' Identifier)*;

functionDefinition       :     Identifier '(' identifierList ')' '=' 'VALOF' functionBlock;

functionBlock            :     '{' commandList resultisCommand '}';

procedureDefinition      :     Identifier '(' identifierList ')' 'BE' commandBlock;

variableDefinition       :     ('GLOBAL')? (intVariableDefinition | boolVariableDefinition);

intVariableDefinition    :    'INT' Identifier '=' numberExpression;

boolVariableDefinition   :    'BOOL' Identifier '=' booleanExpression;

commandBlock             :    '{' commandList '}';

commandList              :     command (';' command)*;

command                  :     assignmentCommand
                         |     resultisCommand
                         |     whileCommand
                         |     ifCommand
                         |     breakCommand
                         |     continueCommand
                         |     printCommand
                         |     functionCallCommand;

functionCallCommand      :      Identifier '(' identifierList ')';

ifCommand                :     'IF' '(' booleanExpression ')' commandBlock ('ELSE' commandBlock)?;

whileCommand             :     'WHILE' '(' booleanExpression ')' commandBlock;

resultisCommand          :     'RESULTIS' expression;

assignmentCommand        :     Identifier ':=' expression;

breakCommand             :     'BREAK';

continueCommand          :     'CONTINUE';

printCommand             :     'WRITEF' '(' expression ')';

primaryNumberExpression  :     Number
                         |     Identifier;

divisionExpression       :     primaryNumberExpression '/' primaryNumberExpression
                         |     primaryNumberExpression;

multiplicationExpression :    divisionExpression '*' divisionExpression
                         |    divisionExpression;

subExpression            :    multiplicationExpression '-' multiplicationExpression
                         |    multiplicationExpression;

numberExpression         :    subExpression '+' subExpression
                         |    subExpression;

relationExpression       :     numberExpression Op_relation numberExpression;

primaryBooleanExpression :    Identifier
                         |    'TRUE'
                         |    'FALSE';

notExpression            :    '!' (primaryBooleanExpression | relationExpression);

andExpression            :     notExpression '&&' notExpression
                         |     notExpression;

orExpression             :     andExpression '||' andExpression
                         |     andExpression;

equalExpression          :     orExpression '==' orExpression
                         |     orExpression;

notEqualExpression       :     equalExpression '!=' equalExpression
                         |     equalExpression;

booleanExpression        :     notEqualExpression
                         |     relationExpression;

expression               :     booleanExpression
                         |     numberExpression
                         |     primaryBooleanExpression;
